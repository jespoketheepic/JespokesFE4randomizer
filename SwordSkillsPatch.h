
#define BIGBLOCK 0x5FDE0
#define CUTDOWN 0x4E112
#define LITTLE1 0x4E2BE
#define LITTLE2 0x4E48B
#define LITTLE3 0x4E4FA
#define LITTLE4 0x4E51B
#define BLOCK2 0x4E568
#define LITTLE5 0x4E6D2
#define LITTLE6 0x4E850
#define LITTLE7 0x4E871
#define LITTLE8 0x4E880
#define LITTLE9 0x4E902
#define LITTLE10 0x4E937
#define LITTLE11 0x4EC98
#define LITTLE12 0x4ECBB
#define LITTLE13 0x4EF03


/* This function is directly based on the simultanious Sword Skills patch of FE4 Binary */
/* This is only split up in so many parts because i spent an extra HOUR on menial work for the slim chance it helps compatibility with other patches (grumble grumble) */
void SwordSkillsPatch(FILE *rom, int header)
{
  /* Do not edit string literals */
  unsigned char bigblock[] = {0xBD, 0x06, 0x00, 0x8D, 0x6F, 0x05, 0xBD, 0x24, 0x00, 0x89, 0x40, 0x00, 0xF0, 0x23, 0x22, 0xCB, 0x9B, 0x84, 0x22, 0x9C, 0xEF, 0x84, 0xB0, 0x19, 0xAF, 0xE8, 0xCC, 0x7E, 0xCF, 0xD6, 0xCC, 0x7E, 0xD0, 0x4B, 0xE2, 0x20, 0xA9, 0x01, 0x8F, 0xDC, 0xCC, 0x7E, 0xC2, 0x20, 0xA9, 0xFE, 0x13, 0x80, 0x38, 0xBD, 0x24, 0x00, 0x89, 0x08, 0x00, 0xF0, 0x15, 0x22, 0xCB, 0x9B, 0x84, 0x22, 0x9C, 0xEF, 0x84, 0xB0, 0x0B, 0xA9, 0x14, 0x00, 0x9D, 0x3E, 0x00, 0xA9, 0xFE, 0x16, 0x80, 0x1B, 0xBD, 0x24, 0x00, 0x89, 0x04, 0x00, 0xF0, 0x17, 0x22, 0xCB, 0x9B, 0x84, 0x22, 0x9C, 0xEF, 0x84, 0xB0, 0x0D, 0xA9, 0x14, 0x00, 0x9D, 0x3E, 0x00, 0xA9, 0xFE, 0x17, 0x22, 0xB4, 0xFE, 0x85, 0x6B, 0xB9, 0x06, 0x00, 0x8D, 0x6F, 0x05, 0xA9, 0x0E, 0x00, 0x22, 0x9D, 0xA1, 0x87, 0xB0, 0x56, 0xBD, 0x06, 0x00, 0x8D, 0x6F, 0x05, 0xBD, 0x24, 0x00, 0x89, 0x20, 0x00, 0xF0, 0x20, 0x22, 0xCB, 0x9B, 0x84, 0x22, 0x9C, 0xEF, 0x84, 0xB0, 0x16, 0xE2, 0x20, 0xAF, 0xDD, 0xCC, 0x7E, 0x18, 0x69, 0x01, 0x8F, 0xDD, 0xCC, 0x7E, 0xC2, 0x20, 0xA9, 0xFE, 0x14, 0x22, 0xB4, 0xFE, 0x85, 0xBD, 0x24, 0x00, 0x89, 0x10, 0x00, 0xF0, 0x20, 0x22, 0xCB, 0x9B, 0x84, 0x22, 0x9C, 0xEF, 0x84, 0xB0, 0x16, 0xE2, 0x20, 0xAF, 0xDD, 0xCC, 0x7E, 0x18, 0x69, 0x02, 0x8F, 0xDD, 0xCC, 0x7E, 0xC2, 0x20, 0xA9, 0xFE, 0x15, 0x22, 0xB4, 0xFE, 0x85, 0x6B, 0x8D, 0x4A, 0x05, 0xA9, 0x00, 0x7E, 0x8D, 0x5D, 0x05, 0xA9, 0x81, 0x4F, 0x8D, 0x5C, 0x05, 0x22, 0x65, 0xE4, 0x82, 0x6B};
  unsigned char cutdown[] = {0x3A, 0xE1, 0x84, 0xBD, 0x22, 0x00, 0xC9, 0x08, 0x00, 0xF0, 0x1D, 0x20, 0x3B, 0xDF, 0x90, 0x18, 0x20, 0xD7, 0xE4, 0x90, 0x13, 0xB9, 0x06, 0x00, 0x8D, 0x6F, 0x05, 0xA9, 0x0E, 0x00, 0x22, 0x9D, 0xA1, 0x87, 0xB0, 0x04, 0x22, 0xE0, 0xFD, 0x85, 0x60, 0xFC, 0x9F, 0xE4, 0x20, 0x43, 0xE1, 0x18, 0x60, 0xE2, 0x20, 0xA9, 0x00, 0x8F, 0xDD, 0xCC, 0x7E, 0xC2, 0x20, 0x60, 0x22, 0x4E, 0xFE, 0x85, 0x20, 0x54, 0xE5, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  unsigned char little1[] = {0x89, 0x01, 0x00, 0xF0};
  unsigned char little2[] = {0x20, 0x3B, 0xE1};
  unsigned char little3[] = {0x4E, 0xE1};
  unsigned char little4[] = {0xEA};
  unsigned char block2[] = {0x89, 0x00, 0x01, 0xD0, 0x73, 0x89, 0x00, 0x02, 0xD0};
  unsigned char little5[] = {0x89, 0x00, 0x01, 0xD0};
  unsigned char little6[] = {0x4E, 0xE1};
  unsigned char little7[] = {0xEA};
  unsigned char little8[] = {0x4E, 0xE1};
  unsigned char little9[] = {0xEA};
  unsigned char little10[] = {0xEA};
  unsigned char little11[] = {0x4E, 0xE1};
  unsigned char little12[] = {0xEA};
  unsigned char little13[] = {0x89, 0x00, 0x02, 0xF0};
  
  fseek(rom, BIGBLOCK + header, SEEK_SET);
  fwrite(bigblock, 1, 0xE8, rom);
  
  fseek(rom, CUTDOWN + header , SEEK_SET);
  fwrite(cutdown, 1, 0x8D, rom);
  
  fseek(rom, LITTLE1 + header, SEEK_SET);
  fwrite(little1, 1, 0x04, rom);
  
  fseek(rom, LITTLE2 + header, SEEK_SET);
  fwrite(little2, 1, 0x03, rom);
  
  fseek(rom, LITTLE3 + header, SEEK_SET);
  fwrite(little3, 1, 0x02, rom);
  
  fseek(rom, LITTLE4 + header, SEEK_SET);
  fwrite(little4, 1, 0x01, rom);

  fseek(rom, BLOCK2 + header, SEEK_SET);
  fwrite(block2, 1, 0x09, rom);  
  
  fseek(rom, LITTLE5 + header, SEEK_SET);
  fwrite(little5, 1, 0x04, rom);
  
  fseek(rom, LITTLE6 + header, SEEK_SET);
  fwrite(little6, 1, 0x02, rom);
  
  fseek(rom, LITTLE7 + header, SEEK_SET);
  fwrite(little7, 1, 0x01, rom);
  
  fseek(rom, LITTLE8 + header, SEEK_SET);
  fwrite(little8, 1, 0x02, rom);
  
  fseek(rom, LITTLE9 + header, SEEK_SET);
  fwrite(little9, 1, 0x01, rom);
  
  fseek(rom, LITTLE10 + header, SEEK_SET);
  fwrite(little10, 1, 0x01, rom);
  
  fseek(rom, LITTLE11 + header, SEEK_SET);
  fwrite(little11, 1, 0x02, rom);
  
  fseek(rom, LITTLE12 + header, SEEK_SET);
  fwrite(little12, 1, 0x01, rom);

  fseek(rom, LITTLE13 + header, SEEK_SET);
  fwrite(little13, 1, 0x04, rom);  
  
  return;
}